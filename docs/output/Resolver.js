Ext.data.JsonP.Resolver({"tagname":"class","name":"Resolver","autodetected":{},"files":[{"filename":"Resolver.js","href":"Resolver.html#Resolver"}],"author":[{"tagname":"author","name":"Brian Cavalier","email":null}],"private":true,"members":[{"name":"notify","tagname":"method","owner":"Resolver","id":"method-notify","meta":{}},{"name":"reject","tagname":"method","owner":"Resolver","id":"method-reject","meta":{}},{"name":"resolve","tagname":"method","owner":"Resolver","id":"method-resolve","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Resolver","short_doc":"In most situations, you'll deal with promises--observing them via Promise.then,\nor returning them to callers. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"implementedBy":[],"mixins":[],"implements":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Resolver.html#Resolver' target='_blank'>Resolver.js</a></div></pre><div class='doc-contents'><div class='rounded-box private-box'><p><strong>NOTE:</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p></div><p>In most situations, you'll deal with promises--observing them via <a href=\"#!/api/Promise-method-then\" rel=\"Promise-method-then\" class=\"docClass\">Promise.then</a>,\nor returning them to callers. Sometimes it can also be useful to hand out a resolver and allow another\n(possibly untrusted) party to provide the resolution value for a promise.\nThis provides a way to allow an untrusted to safely provide a result to your code, <em>or to another\n(also possibly untrusted) party</em>.</p>\n\n<p>In other words, you can allow two parties to communicate safely by giving the promise portion of a deferred to one,\nand the resolver portion to the other.</p>\n\n<h2>Adapting callback-based APIs</h2>\n\n<p>Also, <code>when.js</code> resolver methods (<a href=\"#!/api/Resolver-method-resolve\" rel=\"Resolver-method-resolve\" class=\"docClass\">resolve</a> and <a href=\"#!/api/Resolver-method-reject\" rel=\"Resolver-method-reject\" class=\"docClass\">reject</a>) can be used as callback functions\nby passing them to libraries that are built around traditional callback patterns, rather than promises.</p>\n\n<p>Here's a simple example:</p>\n\n<pre><code>function getWithPromise(url) {\n  var deferred, resolver;\n\n  // Create a deferred, which has both a resolver and a promise part, and grab the resolver\n  deferred = when.defer();\n  resolver = deferred.resolver;\n\n  // We can pass the deferred resolver's resolve() and reject() methods directly as the callbacks\n  // because the resolver's methods can be called without their original context.\n  oldSchoolAjaxFunctionThatUsesCallbacks('GET', url, resolver.resolve, resolver.reject);\n\n  // Return the promise part to the caller.\n  // Now the oldSchoolAjaxFunctionThatUsesCallbacks and our caller can communicate (in one direction)\n  // without knowing about each other.  The resolver/promise separation also guarantess they cannot\n  // corrupt each other.\n  return deferred.promise;\n}\n</code></pre>\n\n<h2>Creating new APIs</h2>\n\n<p>Adapting callback-based APIs is only one way to use resolvers. Sometimes it can also be useful to build your\nown APIs that accept resolvers. For example, if you want to create a plugin architecture for your library\nor product, a plugin could simply be an object with a method that accepts a resolver that can be used by\nthe plugin to signal that it has completed its work.</p>\n\n<p>This also allows the plugins to avoid creating their own deferreds/promises. Thus, they don't need to use\na promise library, and can easily use other callback-based APIs, if needed.</p>\n\n<p>For example:</p>\n\n<pre><code>// My Plugin API\n// {\n//   All plugins should implement the doPluginStuff method\n//\n//   doPluginStuff: function(resolver) {}\n// }\n\n// Simple plugin implementation\n{\n  doPluginStuff: function(resolver, ...) {\n    var awesomePluginResult;\n\n    try {\n      // Do stuff\n      // ...\n      // Compute the result asynchronously, using some old school callback/errback-based API\n      // Again, we can pass the resolver's methods directly\n\n      computeAwesomePluginResultAsynchronously(resolver.resolve, resolver.reject);\n    } catch(e) {\n      // Uh oh, something went wrong in the syncrhonous portion above\n\n      resolver.reject(e);\n    }\n\n    // Don't need to return anything\n  }\n}\n\n// Snippet from our library that calls our plugins\nfunction callPlugin(plugin) {\n  var deferred = when.defer();\n\n  // Give the resolver to the plugin to do its work\n  plugin.doPluginStuff(deferred.resolver);\n\n  // Return the promise, so our own code can observe the plugin result, even though\n  // the plugin may be asynchronous.\n  // This promise can also safely be exposed to any number of untrusted parties since the resolver\n  // and promise will facilitate safe, one-way communication of the plugin's result.\n  return deferred.promise;\n}\n</code></pre>\n\n<div class=\"notice\">\nDocumentation for this class comes from <a href=\"https://github.com/cujojs/when/blob/master/docs/api.md\">when.js</a>\nand is available under <a href=\"ttp://www.opensource.org/licenses/mit-license.php\">MIT license</a>.\n</div>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-notify' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Resolver'>Resolver</span><br/><a href='source/Resolver.html#Resolver-method-notify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Resolver-method-notify' class='name expandable'>notify</a>( <span class='pre'>progress</span> ) : <a href=\"#!/api/Promise\" rel=\"Promise\" class=\"docClass\">Promise</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Notify about the promise progress. ...</div><div class='long'><p>Notify about the promise progress.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>progress</span> : *<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Promise\" rel=\"Promise\" class=\"docClass\">Promise</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-reject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Resolver'>Resolver</span><br/><a href='source/Resolver.html#Resolver-method-reject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Resolver-method-reject' class='name expandable'>reject</a>( <span class='pre'>promiseOrValue</span> ) : undefined<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a rejected promise with the supplied error as the rejection reason. ...</div><div class='long'><p>Create a rejected promise with the supplied error as the rejection reason.</p>\n\n<pre><code>promise.reject(error);\n</code></pre>\n\n<blockquote><p><strong>DEPRECATION WARNING</strong>: In when.js 2.x, error is allowed to be a promise for an error.\nIn when.js 3.0, error will always be used verbatim as the rejection reason, even if it is a promise.</p></blockquote>\n\n<p>If error is a value, it will be the rejection reason of the returned promise.\nIf error is a promise, its rejection reason will be the rejection reason of the returned promise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>promiseOrValue</span> : *<div class='sub-desc'><p>the rejected value of the returned promise.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>undefined</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-resolve' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Resolver'>Resolver</span><br/><a href='source/Resolver.html#Resolver-method-resolve' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Resolver-method-resolve' class='name expandable'>resolve</a>( <span class='pre'>promiseOrValue</span> ) : undefined<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a resolved promise for the supplied promiseOrValue. ...</div><div class='long'><p>Create a resolved promise for the supplied promiseOrValue. If promiseOrValue is a value, it will\nbe the resolution value of the returned promise. Returns promiseOrValue if it's a trusted promise.\nIf promiseOrValue is a foreign promise, returns a promise in the same state (resolved or rejected)\nand with the same value as promiseOrValue.</p>\n\n<pre><code>promise.resolve(promiseOrValue);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>promiseOrValue</span> : *<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>undefined</span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"private":true}});