Ext.data.JsonP.log_logger({"tagname":"class","name":"log.logger","autodetected":{},"files":[{"filename":"logger.js","href":"logger.html#log-logger"}],"localdoc":"<h2>Changing framework logger</h2>\n\n<p>This is a <em>virtual</em> class that under normal circumstances is an alias for the <a href=\"#!/api/log.console\" rel=\"log.console\" class=\"docClass\">log.console</a> sink.</p>\n\n<p>If you want to change logger sink in your application you should use the <a href=\"http://requirejs.org/docs/api.html#config-map\">requirejs map config</a>\nto map this class to any module that implements the <a href=\"#!/api/log.logger\" rel=\"log.logger\" class=\"docClass\">log.logger</a> API.</p>\n\n<p>An example configuration that would change the logger to <a href=\"#!/api/log.null\" rel=\"log.null\" class=\"docClass\">log.null</a> would look like this:</p>\n\n<pre><code>requirejs.config({\n  \"map\": {\n    \"*\": {\n      \"troopjs-log/logger\": \"troopjs-log/null\"\n    }\n  }\n});\n</code></pre>\n","singleton":true,"interface":true,"aliases":{"feature":["logger"]},"members":[{"name":"assert","tagname":"method","owner":"log.logger","id":"method-assert","meta":{}},{"name":"debug","tagname":"method","owner":"log.logger","id":"method-debug","meta":{"deprecated":{"text":"<p>An alias for <a href=\"#!/api/log.logger-method-log\" rel=\"log.logger-method-log\" class=\"docClass\">log</a>. This was added to improve compatibility with existing sites already using <code>debug()</code>. However, you should use <a href=\"#!/api/log.logger-method-log\" rel=\"log.logger-method-log\" class=\"docClass\">log</a> instead.</p>\n"}}},{"name":"dir","tagname":"method","owner":"log.logger","id":"method-dir","meta":{}},{"name":"error","tagname":"method","owner":"log.logger","id":"method-error","meta":{}},{"name":"info","tagname":"method","owner":"log.logger","id":"method-info","meta":{}},{"name":"log","tagname":"method","owner":"log.logger","id":"method-log","meta":{}},{"name":"time","tagname":"method","owner":"log.logger","id":"method-time","meta":{}},{"name":"timeEnd","tagname":"method","owner":"log.logger","id":"method-timeEnd","meta":{}},{"name":"trace","tagname":"method","owner":"log.logger","id":"method-trace","meta":{}},{"name":"warn","tagname":"method","owner":"log.logger","id":"method-warn","meta":{}}],"alternateClassNames":[],"id":"class-log.logger","short_doc":"The console interface describes the API of the client's debugging console\n(e.g. ...","classIcon":"icon-singleton","superclasses":[],"subclasses":[],"mixedInto":["core.composition"],"implementedBy":["log.console","log.null"],"mixins":[],"implements":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Mixed into</h4><div class='dependency'><a href='#!/api/core.composition' rel='core.composition' class='docClass'>core.composition</a></div><h4>Implemented By</h4><div class='dependency'><a href='#!/api/log.console' rel='log.console' class='docClass'>log.console</a></div><div class='dependency'><a href='#!/api/log.null' rel='log.null' class='docClass'>log.null</a></div><h4>Files</h4><div class='dependency'><a href='source/logger.html#log-logger' target='_blank'>logger.js</a></div></pre><div class='doc-contents'><p>The console interface describes the API of the client's debugging console\n(e.g. the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console\">Web Console</a> in Firefox).\nThe specifics of how it works vary from client to client, but there is a <em>de facto</em> set of features that are\ntypically provided.</p>\n\n<h2>Outputting text to the console</h2>\n\n<p>The most frequently-used feature of the console is logging of text and other data.\nThere are four categories of output you can generate, using the <a href=\"#!/api/log.logger-method-log\" rel=\"log.logger-method-log\" class=\"docClass\">log</a>, <a href=\"#!/api/log.logger-method-info\" rel=\"log.logger-method-info\" class=\"docClass\">info</a>, <a href=\"#!/api/log.logger-method-warn\" rel=\"log.logger-method-warn\" class=\"docClass\">warn</a>,\nand <a href=\"#!/api/log.logger-method-error\" rel=\"log.logger-method-error\" class=\"docClass\">error</a> methods. Each of these results in output that's styled differently in the log,\nand you can use the filtering controls provided by your client to only view the kinds of output that interest you.</p>\n\n<p>There are two ways to use each of the output methods; you can simply pass in a list of objects whose\nstring representations get concatenated into one string then output to the console, or you can pass in a string\ncontaining zero or more substitution strings followed by a list of the objects with which to replace them.</p>\n\n<h3>Writing a single object</h3>\n\n<p>The simplest way to use the logging methods is to output a single object:</p>\n\n<pre><code>var someObject = { str: \"Some text\", id: 5 };\nlogger.log(someObject);\n</code></pre>\n\n<p>The output looks something like this:</p>\n\n<pre><code>[09:27:13.475] ({str:\"Some text\", id:5})\n</code></pre>\n\n<h3>Writing multiple objects</h3>\n\n<p>You can also output multiple objects by simply listing them when calling the logging method, like this:</p>\n\n<pre><code>var car = \"Dodge Charger\";\nvar someObject = {str:\"Some text\", id:5};\nconsole.info(\"My first car was a\", car, \". The object is: \", someObject);\n</code></pre>\n\n<p>This output will look like this:</p>\n\n<pre><code>[09:28:22.711] My first car was a Dodge Charger . The object is:  ({str:\"Some text\", id:5})\n</code></pre>\n\n<h3>Using string substitutions</h3>\n\n<p>When passing a string to one of the console methods that accepts a string, you may use these substitution strings:</p>\n\n<ul>\n<li><code>%o</code>         : Outputs a hyperlink to a JavaScript object. Clicking the link opens an inspector.</li>\n<li><code>%d</code> or <code>%i</code> : Outputs an integer. Formatting is not yet supported.</li>\n<li><code>%s</code>         : Outputs a string.</li>\n<li><code>%f</code>         : Outputs a floating-point value. Formatting is not yet supported.</li>\n</ul>\n\n\n<p>Each of these pulls the next argument after the format string off the parameter list. For example:</p>\n\n<pre><code>for (var i=0; i&lt;5; i++) {\n  console.log(\"Hello, %s. You've called me %d times.\", \"Bob\", i+1);\n}\n</code></pre>\n\n<p>The output looks like this:</p>\n\n<pre><code>[13:14:13.481] Hello, Bob. You've called me 1 times.\n[13:14:13.483] Hello, Bob. You've called me 2 times.\n[13:14:13.485] Hello, Bob. You've called me 3 times.\n[13:14:13.487] Hello, Bob. You've called me 4 times.\n[13:14:13.488] Hello, Bob. You've called me 5 times.\n</code></pre>\n\n<h2>Timers</h2>\n\n<p>In order to calculate the duration of a specific operation, you can use timers.\nTo start a timer, call the <a href=\"#!/api/log.logger-method-time\" rel=\"log.logger-method-time\" class=\"docClass\">time</a> method, giving it a name as only parameter.\nTo stop the timer, and to get the elapsed time in miliseconds, just call the <a href=\"#!/api/log.logger-method-timeEnd\" rel=\"log.logger-method-timeEnd\" class=\"docClass\">timeEnd</a> method,\nagain passing the timer's name as the parameter.\nUp to 10,000 timers can run simultaneously on a given page.</p>\n\n<p>For example, given this code:</p>\n\n<pre><code>console.time(\"answer time\");\nalert(\"Click to continue\");\nconsole.timeEnd(\"answer time\");\n</code></pre>\n\n<p>will log the time needed by the user to discard the alert box:</p>\n\n<pre><code>13:50:42.246: answer time: timer started\n13:50:43.243: answer time: 998ms\n</code></pre>\n\n<p>Notice that the timer's name is displayed both when the timer is started and when it's stopped.</p>\n\n<h2>Stack traces</h2>\n\n<p>The console also supports outputting a stack trace; this will show you the call path taken to reach the point at\nwhich you call <a href=\"#!/api/log.logger-method-trace\" rel=\"log.logger-method-trace\" class=\"docClass\">trace</a>. Given code like this:</p>\n\n<pre><code>foo();\n  function foo() {\n    function bar() {\n      console.trace();\n    }\n  bar();\n}\n</code></pre>\n\n<p>The output in the console looks something like this:</p>\n\n<pre><code>console.trace():   main.js:46\n  bar()           main.js:46\n  foo()           main.js:48\n  &lt;anonymous&gt;     main.js:42\n</code></pre>\n\n<div class=\"notice\">\nDocumentation for this class comes from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\">MDN</a>\nand is available under <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">Creative Commons: Attribution-Sharealike license</a>.\n</div>\n\n<h2>Changing framework logger</h2>\n\n<p>This is a <em>virtual</em> class that under normal circumstances is an alias for the <a href=\"#!/api/log.console\" rel=\"log.console\" class=\"docClass\">log.console</a> sink.</p>\n\n<p>If you want to change logger sink in your application you should use the <a href=\"http://requirejs.org/docs/api.html#config-map\">requirejs map config</a>\nto map this class to any module that implements the <a href=\"#!/api/log.logger\" rel=\"log.logger\" class=\"docClass\">log.logger</a> API.</p>\n\n<p>An example configuration that would change the logger to <a href=\"#!/api/log.null\" rel=\"log.null\" class=\"docClass\">log.null</a> would look like this:</p>\n\n<pre><code>requirejs.config({\n  \"map\": {\n    \"*\": {\n      \"troopjs-log/logger\": \"troopjs-log/null\"\n    }\n  }\n});\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-assert' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-assert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-assert' class='name expandable'>assert</a>( <span class='pre'>expression, payload, [obj]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a message and stack trace to the log if first argument is false ...</div><div class='long'><p>Writes a message and stack trace to the log if first argument is false</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expression</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><div class='sub-desc'><p>Conditional expression</p>\n</div></li><li><span class='pre'>payload</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>|<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Initial payload</p>\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>... (optional)<div class='sub-desc'><p>Supplementary payloads</p>\n\n<ul>\n<li>If <code>payload</code> is of type <code>Object</code> the string representations of each of these objects are appended together in the order listed and output.</li>\n<li>If <code>payload</code> is of type <code>String</code> these are JavaScript objects with which to replace substitution strings within payload.</li>\n</ul>\n\n</div></li></ul></div></div></div><div id='method-debug' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-debug' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-debug' class='name expandable'>debug</a>( <span class='pre'>payload, [obj]</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Writes a message to the log with level debug ...</div><div class='long'><p>Writes a message to the log with level <code>debug</code></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>An alias for <a href=\"#!/api/log.logger-method-log\" rel=\"log.logger-method-log\" class=\"docClass\">log</a>. This was added to improve compatibility with existing sites already using <code>debug()</code>. However, you should use <a href=\"#!/api/log.logger-method-log\" rel=\"log.logger-method-log\" class=\"docClass\">log</a> instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>payload</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>|<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Initial payload</p>\n\n\n\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>... (optional)<div class='sub-desc'><p>Supplementary payloads</p>\n\n\n\n\n<ul>\n<li>If <code>payload</code> is of type <code>Object</code> the string representations of each of these objects are appended together in the order listed and output.</li>\n<li>If <code>payload</code> is of type <code>String</code> these are JavaScript objects with which to replace substitution strings within payload.</li>\n</ul>\n\n\n\n</div></li></ul></div></div></div><div id='method-dir' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-dir' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-dir' class='name expandable'>dir</a>( <span class='pre'>object</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Displays an interactive list of the properties of the specified JavaScript object. ...</div><div class='long'><p>Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing that let you see the contents of child objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>A JavaScript object whose properties should be output</p>\n</div></li></ul></div></div></div><div id='method-error' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-error' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-error' class='name expandable'>error</a>( <span class='pre'>payload, [obj]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a message to the log with level error ...</div><div class='long'><p>Writes a message to the log with level <code>error</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>payload</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>|<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Initial payload</p>\n\n\n\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>... (optional)<div class='sub-desc'><p>Supplementary payloads</p>\n\n\n\n\n<ul>\n<li>If <code>payload</code> is of type <code>Object</code> the string representations of each of these objects are appended together in the order listed and output.</li>\n<li>If <code>payload</code> is of type <code>String</code> these are JavaScript objects with which to replace substitution strings within payload.</li>\n</ul>\n\n\n\n</div></li></ul></div></div></div><div id='method-info' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-info' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-info' class='name expandable'>info</a>( <span class='pre'>payload, [obj]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a message to the log with level info. ...</div><div class='long'><p>Writes a message to the log with level <code>info</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>payload</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>|<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Initial payload</p>\n\n\n\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>... (optional)<div class='sub-desc'><p>Supplementary payloads</p>\n\n\n\n\n<ul>\n<li>If <code>payload</code> is of type <code>Object</code> the string representations of each of these objects are appended together in the order listed and output.</li>\n<li>If <code>payload</code> is of type <code>String</code> these are JavaScript objects with which to replace substitution strings within payload.</li>\n</ul>\n\n\n\n</div></li></ul></div></div></div><div id='method-log' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-log' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-log' class='name expandable'>log</a>( <span class='pre'>payload, [obj]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a message to the log with level log ...</div><div class='long'><p>Writes a message to the log with level <code>log</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>payload</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>|<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Initial payload</p>\n\n\n\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>... (optional)<div class='sub-desc'><p>Supplementary payloads</p>\n\n\n\n\n<ul>\n<li>If <code>payload</code> is of type <code>Object</code> the string representations of each of these objects are appended together in the order listed and output.</li>\n<li>If <code>payload</code> is of type <code>String</code> these are JavaScript objects with which to replace substitution strings within payload.</li>\n</ul>\n\n\n\n</div></li></ul></div></div></div><div id='method-time' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-time' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-time' class='name expandable'>time</a>( <span class='pre'>timerName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts a timer you can use to track how long an operation takes. ...</div><div class='long'><p>Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page.\nWhen you call <a href=\"#!/api/log.logger-method-timeEnd\" rel=\"log.logger-method-timeEnd\" class=\"docClass\">timeEnd</a> with the same name, the log will output the time, in milliseconds, that elapsed since the timer was started.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timerName</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The name to give the new timer. This will identify the timer; use the same name when calling <a href=\"#!/api/log.logger-method-timeEnd\" rel=\"log.logger-method-timeEnd\" class=\"docClass\">timeEnd</a> to stop the timer and get the time written to the log</p>\n</div></li></ul></div></div></div><div id='method-timeEnd' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-timeEnd' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-timeEnd' class='name expandable'>timeEnd</a>( <span class='pre'>timerName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops a timer that was previously started by calling time. ...</div><div class='long'><p>Stops a timer that was previously started by calling <a href=\"#!/api/log.logger-method-time\" rel=\"log.logger-method-time\" class=\"docClass\">time</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timerName</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The name of the timer to stop. Once stopped, the elapsed time is automatically written to the log</p>\n</div></li></ul></div></div></div><div id='method-trace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-trace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-trace' class='name expandable'>trace</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Outputs a stack trace to the log. ...</div><div class='long'><p>Outputs a stack trace to the log.</p>\n</div></div></div><div id='method-warn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='log.logger'>log.logger</span><br/><a href='source/logger.html#log-logger-method-warn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/log.logger-method-warn' class='name expandable'>warn</a>( <span class='pre'>payload, [obj]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a message to the log with level warn ...</div><div class='long'><p>Writes a message to the log with level <code>warn</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>payload</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>|<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Initial payload</p>\n\n\n\n</div></li><li><span class='pre'>obj</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>... (optional)<div class='sub-desc'><p>Supplementary payloads</p>\n\n\n\n\n<ul>\n<li>If <code>payload</code> is of type <code>Object</code> the string representations of each of these objects are appended together in the order listed and output.</li>\n<li>If <code>payload</code> is of type <code>String</code> these are JavaScript objects with which to replace substitution strings within payload.</li>\n</ul>\n\n\n\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"interface":true,"singleton":true}});