Ext.data.JsonP.compose_mixin_config({"tagname":"class","name":"compose.mixin.config","autodetected":{},"files":[{"filename":"config.js","href":"config.html#compose-mixin-config"}],"protected":true,"aliases":{"feature":["config"]},"members":[{"name":"pragmas","tagname":"cfg","owner":"compose.mixin.config","id":"cfg-pragmas","meta":{"protected":true}},{"name":"specials","tagname":"cfg","owner":"compose.mixin.config","id":"cfg-specials","meta":{"protected":true}}],"alternateClassNames":[],"id":"class-compose.mixin.config","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":["compose.mixin.factory"],"implementedBy":[],"mixins":[],"implements":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Mixed into</h4><div class='dependency'><a href='#!/api/compose.mixin.factory' rel='compose.mixin.factory' class='docClass'>compose.mixin.factory</a></div><h4>Files</h4><div class='dependency'><a href='source/config.html#compose-mixin-config' target='_blank'>config.js</a></div></pre><div class='doc-contents'><p>Provides configuration for the <a href=\"#!/api/compose.mixin.factory\" rel=\"compose.mixin.factory\" class=\"docClass\">compose.mixin.factory</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-pragmas' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='compose.mixin.config'>compose.mixin.config</span><br/><a href='source/config.html#compose-mixin-config-cfg-pragmas' target='_blank' class='view-source'>view source</a></div><a href='#!/api/compose.mixin.config-cfg-pragmas' class='name expandable'>pragmas</a> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a>[]<span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>Pragmas used to rewrite methods before processing ...</div><div class='long'><p>Pragmas used to rewrite methods before processing</p>\n<p>Defaults to: <code>[]</code></p><ul><li><span class='pre'>pattern</span> : <a href=\"#!/api/RegExp\" rel=\"RegExp\" class=\"docClass\">RegExp</a><div class='sub-desc'><p>Matching pattern</p>\n</div></li><li><span class='pre'>replace</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>|<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>Replacement String or function</p>\n</div></li></ul></div></div></div><div id='cfg-specials' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='compose.mixin.config'>compose.mixin.config</span><br/><a href='source/config.html#compose-mixin-config-cfg-specials' target='_blank' class='view-source'>view source</a></div><a href='#!/api/compose.mixin.config-cfg-specials' class='name expandable'>specials</a> : <a href=\"#!/api/RegExp\" rel=\"RegExp\" class=\"docClass\">RegExp</a><span class=\"signature\"><span class='protected' >protected</span></span></div><div class='description'><div class='short'>Regular Expression used parse 'specials'. ...</div><div class='long'><p>Regular Expression used parse 'specials'.\nA special must be in form of a function call (ended in parenthesis), and have an optional type following a slash</p>\n\n<pre><code>&lt;special&gt;[/&lt;type&gt;](&lt;arguments&gt;)\n</code></pre>\n</div></div></div></div></div></div></div>","meta":{"protected":true}});