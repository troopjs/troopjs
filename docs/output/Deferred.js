Ext.data.JsonP.Deferred({"tagname":"class","name":"Deferred","autodetected":{},"files":[{"filename":"Deferred.js","href":"Deferred.html#Deferred"}],"author":[{"tagname":"author","name":"Brian Cavalier","email":null}],"private":true,"members":[{"name":"promise","tagname":"property","owner":"Deferred","id":"property-promise","meta":{}},{"name":"resolver","tagname":"property","owner":"Deferred","id":"property-resolver","meta":{}},{"name":"notify","tagname":"method","owner":"Deferred","id":"method-notify","meta":{}},{"name":"reject","tagname":"method","owner":"Deferred","id":"method-reject","meta":{}},{"name":"resolve","tagname":"method","owner":"Deferred","id":"method-resolve","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Deferred","short_doc":"A Deferred represents a computation or unit of work that may not have completed yet. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"implementedBy":[],"mixins":[],"implements":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Deferred.html#Deferred' target='_blank'>Deferred.js</a></div></pre><div class='doc-contents'><div class='rounded-box private-box'><p><strong>NOTE:</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p></div><p>A Deferred represents a computation or unit of work that may not have completed yet. Typically (but not always),\nthat computation will be something that executes asynchronously and completes at some point in the future.\nFor example, XHR operations (asynchronous ones, anyway, which is typical) in a browser never complete in\nthe current turn of the Javascript event loop. Thus, an asynchronous XHR is one type of deferred computation.</p>\n\n<p>A Deferred typically has a single producer (although having many producers can be useful, too) and many consumers.\nA producer is responsible for providing the result of the computation, and typically, but not always, will be the\nsame component that created the Deferred. As the name implies, a consumer observes the result of the computation.</p>\n\n<h2>Producers</h2>\n\n<p>Producers provide a result via the <a href=\"#!/api/Resolver\" rel=\"Resolver\" class=\"docClass\">Resolver</a> API: <a href=\"#!/api/Deferred-method-resolve\" rel=\"Deferred-method-resolve\" class=\"docClass\">resolve</a> or <a href=\"#!/api/Resolver-method-resolve\" rel=\"Resolver-method-resolve\" class=\"docClass\">resolver.resolve</a>.\nThe two are functionally equivalent, but <a href=\"#!/api/Deferred-property-resolver\" rel=\"Deferred-property-resolver\" class=\"docClass\">resolver</a> can safely be given out to an untrusted component\nwithout giving away full access to the Deferred. The resolver is also <em>frozen</em> and thus cannot be corrupted.\nThat provides a clear <em>separation of concerns</em> by allowing a component to produce a result but not to know\nany details about consumers.</p>\n\n<pre><code>var deferred = when.defer();\n// The deferred's resolver, which can safely be given to other components\nvar resolver = deferred.resolver;\n</code></pre>\n\n<h2>Consumers</h2>\n\n<p>Consumers can observe the result via <a href=\"#!/api/Deferred-property-promise\" rel=\"Deferred-property-promise\" class=\"docClass\">promise</a>. The promise can be given to any number of components,\nwho can observe the result using <a href=\"#!/api/Promise-method-then\" rel=\"Promise-method-then\" class=\"docClass\">Promise.then</a>.\nLike <a href=\"#!/api/Deferred-property-resolver\" rel=\"Deferred-property-resolver\" class=\"docClass\">resolver</a>, even though when.js's Deferred implements the <a href=\"#!/api/Promise\" rel=\"Promise\" class=\"docClass\">Promise</a> API, it is better to\ngive only the <a href=\"#!/api/Deferred-property-promise\" rel=\"Deferred-property-promise\" class=\"docClass\">promise</a> to consumers so that they can't modify the Deferred (such as calling\n<a href=\"#!/api/Deferred-method-resolve\" rel=\"Deferred-method-resolve\" class=\"docClass\">resolve</a> or <a href=\"#!/api/Deferred-method-reject\" rel=\"Deferred-method-reject\" class=\"docClass\">reject</a> on it!).</p>\n\n<pre><code>var deferred = when.defer();\n// The deferred's promise, which can safely be given to other components\nvar promise = deferred.promise;\n</code></pre>\n\n<h2>Resolving and rejecting</h2>\n\n<p>When a producer provides the result by calling <a href=\"#!/api/Resolver-method-resolve\" rel=\"Resolver-method-resolve\" class=\"docClass\">resolver.resolve</a> (or <a href=\"#!/api/Deferred-method-resolve\" rel=\"Deferred-method-resolve\" class=\"docClass\">resolve</a>), all consumers\nare notified by having their callbacks (which they registered via <a href=\"#!/api/Promise-method-then\" rel=\"Promise-method-then\" class=\"docClass\">Promise.then</a>) called with the result.</p>\n\n<p>A producer may also <em>reject</em> the Deferred, signalling that the Deferred's computation failed, or could not complete\ngiven some set of constraints. In this case, all consumers will be notified by having their <code>errorback</code> called\n(the 2nd parameter passed to `<a href=\"#!/api/Promise-method-then\" rel=\"Promise-method-then\" class=\"docClass\">Promise.then</a>).</p>\n\n<h2>Progress</h2>\n\n<p>when.js's Deferreds also support progress notifications, to indicate to consumers that the computation is making\nprogress toward its result. A producer may call <a href=\"#!/api/Resolver-method-notify\" rel=\"Resolver-method-notify\" class=\"docClass\">resolver.notify</a> (or <a href=\"#!/api/Deferred-method-notify\" rel=\"Deferred-method-notify\" class=\"docClass\">notify</a>) and pass\na single parameter (whatever it wants) to indicate progress. All consumers will be notified by having their\nprogress handler called (the 3rd parameter to <a href=\"#!/api/Promise-method-then\" rel=\"Promise-method-then\" class=\"docClass\">Promise.then</a>).</p>\n\n<div class=\"notice\">\nDocumentation for this class comes from <a href=\"https://github.com/cujojs/when/blob/master/docs/api.md\">when.js</a>\nand is available under <a href=\"ttp://www.opensource.org/licenses/mit-license.php\">MIT license</a>.\n</div>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-promise' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Deferred'>Deferred</span><br/><a href='source/Deferred.html#Deferred-property-promise' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Deferred-property-promise' class='name expandable'>promise</a> : <a href=\"#!/api/Promise\" rel=\"Promise\" class=\"docClass\">Promise</a><span class=\"signature\"></span></div><div class='description'><div class='short'><p>The promise under this Deferred.</p>\n</div><div class='long'><p>The promise under this Deferred.</p>\n</div></div></div><div id='property-resolver' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Deferred'>Deferred</span><br/><a href='source/Deferred.html#Deferred-property-resolver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Deferred-property-resolver' class='name expandable'>resolver</a> : <a href=\"#!/api/Resolver\" rel=\"Resolver\" class=\"docClass\">Resolver</a><span class=\"signature\"></span></div><div class='description'><div class='short'>The resolver represents responsibility--the responsibility of fulfilling or rejecting the associated promise. ...</div><div class='long'><p>The resolver represents responsibility--the responsibility of fulfilling or rejecting the associated promise.\nThis responsibility may be given out separately from the promise itself.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-notify' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Deferred'>Deferred</span><br/><a href='source/Deferred.html#Deferred-method-notify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Deferred-method-notify' class='name expandable'>notify</a>( <span class='pre'>progress</span> ) : <a href=\"#!/api/Promise\" rel=\"Promise\" class=\"docClass\">Promise</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Notify about the promise progress. ...</div><div class='long'><p>Notify about the promise progress.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>progress</span> : *<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Promise\" rel=\"Promise\" class=\"docClass\">Promise</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-reject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Deferred'>Deferred</span><br/><a href='source/Deferred.html#Deferred-method-reject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Deferred-method-reject' class='name expandable'>reject</a>( <span class='pre'>promiseOrValue</span> ) : undefined<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a rejected promise with the supplied error as the rejection reason. ...</div><div class='long'><p>Create a rejected promise with the supplied error as the rejection reason.</p>\n\n<pre><code>promise.reject(error);\n</code></pre>\n\n<blockquote><p><strong>DEPRECATION WARNING</strong>: In when.js 2.x, error is allowed to be a promise for an error.\nIn when.js 3.0, error will always be used verbatim as the rejection reason, even if it is a promise.</p></blockquote>\n\n<p>If error is a value, it will be the rejection reason of the returned promise.\nIf error is a promise, its rejection reason will be the rejection reason of the returned promise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>promiseOrValue</span> : *<div class='sub-desc'><p>the rejected value of the returned promise.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>undefined</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-resolve' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Deferred'>Deferred</span><br/><a href='source/Deferred.html#Deferred-method-resolve' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Deferred-method-resolve' class='name expandable'>resolve</a>( <span class='pre'>promiseOrValue</span> ) : undefined<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a resolved promise for the supplied promiseOrValue. ...</div><div class='long'><p>Create a resolved promise for the supplied promiseOrValue. If promiseOrValue is a value, it will\nbe the resolution value of the returned promise. Returns promiseOrValue if it's a trusted promise.\nIf promiseOrValue is a foreign promise, returns a promise in the same state (resolved or rejected)\nand with the same value as promiseOrValue.</p>\n\n<pre><code>promise.resolve(promiseOrValue);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>promiseOrValue</span> : *<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>undefined</span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"private":true}});